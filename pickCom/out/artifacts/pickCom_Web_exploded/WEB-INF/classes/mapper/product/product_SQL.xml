<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="product">

    <!-- 히트 상품 리스트 -->
    <select id="hitProductList" parameterType="hashmap" resultType="hashmap">
        <![CDATA[
        SELECT
            P.PRODUCT_NUM,
            P.MANUFACTURER_NAME,
            P.SELLER_NUM,
            P.PRODUCT_NAME,
            P.PRODUCT_SALEPRICE,
            P.PRODUCT_ORIGINALPRICE,
            (P.PRODUCT_ORIGINALPRICE - P.PRODUCT_SALEPRICE) AS DISCOUNT_AMOUNT,
            P.PRODUCT_SHIPPINGFEE,
            P.PRODUCT_QUANTITY,
            P.PRODUCT_CATEGORY1,
            P.PRODUCT_CATEGORY2,
            P.PRODUCT_DESCRIPTION,
            P.PRODUCT_IMG,
            P.PRODUCT_SOLDOUT,
            P.PRODUCT_SALES,
            TO_CHAR(P.PRODUCT_REGDATE, 'YYYY.MM.DD') AS PRODUCT_DATE,
            P.PRODUCT_VISITCOUNT,
            P.PRODUCT_STAT,
            S.SELLER_NAME,
            S.SELLER_RANK,
            SG.GRADE_SCORE
        FROM
            PRODUCT P
                INNER JOIN SELLER S ON P.SELLER_NUM = S.SELLER_NUM
                LEFT JOIN (
                SELECT
                    PRODUCT_NUM,
                    AVG(GRADE_SCORE) AS GRADE_SCORE
                FROM
                    PRODUCT_GRADE
                WHERE
                    GRADE_STAT = 1
                GROUP BY
                    PRODUCT_NUM
            ) SG ON P.PRODUCT_NUM = SG.PRODUCT_NUM
        WHERE
            P.PRODUCT_SOLDOUT = 0
          AND P.PRODUCT_STAT = 1
          AND P.PRODUCT_REGDATE >= DATE_SUB(CURDATE(), INTERVAL 1 WEEK)
        ORDER BY
            P.PRODUCT_SALES DESC
        ]]>
    </select>

    <!-- 추천 상품 리스트 -->
    <select id="recommendedProductList" parameterType="hashmap" resultType="hashmap">
        <![CDATA[
        SELECT
            P.PRODUCT_NUM,
            P.MANUFACTURER_NAME,
            P.SELLER_NUM,
            P.PRODUCT_NAME,
            P.PRODUCT_SALEPRICE,
            P.PRODUCT_ORIGINALPRICE,
            (P.PRODUCT_ORIGINALPRICE - P.PRODUCT_SALEPRICE) AS DISCOUNT_AMOUNT,
            P.PRODUCT_SHIPPINGFEE,
            P.PRODUCT_QUANTITY,
            P.PRODUCT_CATEGORY1,
            P.PRODUCT_CATEGORY2,
            P.PRODUCT_DESCRIPTION,
            P.PRODUCT_IMG,
            P.PRODUCT_SOLDOUT,
            P.PRODUCT_SALES,
            TO_CHAR(P.PRODUCT_REGDATE, 'YYYY.MM.DD') AS PRODUCT_DATE,
            P.PRODUCT_VISITCOUNT,
            P.PRODUCT_STAT,
            S.SELLER_NAME,
            S.SELLER_RANK,
            SG.GRADE_SCORE
        FROM
            PRODUCT P
                INNER JOIN SELLER S ON P.SELLER_NUM = S.SELLER_NUM
                LEFT JOIN (
                SELECT
                    PRODUCT_NUM,
                    AVG(GRADE_SCORE) AS GRADE_SCORE
                FROM
                    PRODUCT_GRADE
                WHERE
                    GRADE_STAT = 1
                GROUP BY
                    PRODUCT_NUM
            ) SG ON P.PRODUCT_NUM = SG.PRODUCT_NUM
        WHERE
            P.PRODUCT_SOLDOUT = 0
          AND P.PRODUCT_STAT = 1
          AND P.PRODUCT_REGDATE >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)
        ORDER BY
            P.PRODUCT_SALES DESC
        ]]>
    </select>

    <!-- 최신 상품 리스트 -->
    <select id="newProductList" parameterType="hashmap" resultType="hashmap">

        SELECT
            P.PRODUCT_NUM,
            P.MANUFACTURER_NAME,
            P.SELLER_NUM,
            P.PRODUCT_NAME,
            P.PRODUCT_SALEPRICE,
            P.PRODUCT_ORIGINALPRICE,
            (P.PRODUCT_ORIGINALPRICE - P.PRODUCT_SALEPRICE) AS DISCOUNT_AMOUNT,
            P.PRODUCT_SHIPPINGFEE,
            P.PRODUCT_QUANTITY,
            P.PRODUCT_CATEGORY1,
            P.PRODUCT_CATEGORY2,
            P.PRODUCT_DESCRIPTION,
            P.PRODUCT_IMG,
            P.PRODUCT_SOLDOUT,
            P.PRODUCT_SALES,
            TO_CHAR(P.PRODUCT_REGDATE, &#39;YYYY.MM.DD&#39;) AS PRODUCT_DATE,
            P.PRODUCT_VISITCOUNT,
            P.PRODUCT_STAT,
            S.SELLER_NAME,
            S.SELLER_RANK,
            SG.GRADE_SCORE
        FROM
            PRODUCT P
                INNER JOIN SELLER S ON P.SELLER_NUM = S.SELLER_NUM
                LEFT JOIN (
                SELECT
                    PRODUCT_NUM,
                    AVG(GRADE_SCORE) AS GRADE_SCORE
                FROM
                    PRODUCT_GRADE
                WHERE
                    GRADE_STAT = 1
                GROUP BY
                    PRODUCT_NUM
            ) SG ON P.PRODUCT_NUM = SG.PRODUCT_NUM
        WHERE
            P.PRODUCT_SOLDOUT = 0
          AND P.PRODUCT_STAT = 1
          AND P.PRODUCT_REGDATE &gt;= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)

    </select>

    <!-- 베스트 상품 리스트 -->
    <select id="bestProductList" parameterType="hashmap" resultType="hashmap">
        <![CDATA[
        SELECT
            P.PRODUCT_NUM,
            P.MANUFACTURER_NAME,
            P.SELLER_NUM,
            P.PRODUCT_NAME,
            P.PRODUCT_SALEPRICE,
            P.PRODUCT_ORIGINALPRICE,
            (P.PRODUCT_ORIGINALPRICE - P.PRODUCT_SALEPRICE) AS DISCOUNT_AMOUNT,
            P.PRODUCT_SHIPPINGFEE,
            P.PRODUCT_QUANTITY,
            P.PRODUCT_CATEGORY1,
            P.PRODUCT_CATEGORY2,
            P.PRODUCT_DESCRIPTION,
            P.PRODUCT_IMG,
            P.PRODUCT_SOLDOUT,
            P.PRODUCT_SALES,
            TO_CHAR(P.PRODUCT_REGDATE, 'YYYY.MM.DD') AS PRODUCT_DATE,
            P.PRODUCT_VISITCOUNT,
            P.PRODUCT_STAT,
            S.SELLER_NAME,
            S.SELLER_RANK,
            SG.GRADE_SCORE
        FROM
            PRODUCT P
                INNER JOIN SELLER S ON P.SELLER_NUM = S.SELLER_NUM
                LEFT JOIN (
                SELECT
                    PRODUCT_NUM,
                    AVG(GRADE_SCORE) AS GRADE_SCORE
                FROM
                    PRODUCT_GRADE
                WHERE
                    GRADE_STAT = 1
                GROUP BY
                    PRODUCT_NUM
            ) SG ON P.PRODUCT_NUM = SG.PRODUCT_NUM
        WHERE
            P.PRODUCT_SOLDOUT = 0
          AND P.PRODUCT_STAT = 1
          AND P.PRODUCT_REGDATE >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)
        ORDER BY
            P.PRODUCT_SALES DESC
		]]>
    </select>

    <!-- 할인 상품 리스트 -->
    <select id="saleProductList" parameterType="hashmap" resultType="hashmap">
        <![CDATA[
        SELECT
            P.PRODUCT_NUM,
            P.MANUFACTURER_NAME,
            P.SELLER_NUM,
            P.PRODUCT_NAME,
            P.PRODUCT_SALEPRICE,
            P.PRODUCT_ORIGINALPRICE,
            (P.PRODUCT_ORIGINALPRICE - P.PRODUCT_SALEPRICE) AS DISCOUNT_AMOUNT,
            P.PRODUCT_SHIPPINGFEE,
            P.PRODUCT_QUANTITY,
            P.PRODUCT_CATEGORY1,
            P.PRODUCT_CATEGORY2,
            P.PRODUCT_DESCRIPTION,
            P.PRODUCT_IMG,
            P.PRODUCT_SOLDOUT,
            P.PRODUCT_SALES,
            TO_CHAR(P.PRODUCT_REGDATE, 'YYYY.MM.DD') AS PRODUCT_DATE,
            P.PRODUCT_VISITCOUNT,
            P.PRODUCT_STAT,
            S.SELLER_NAME,
            S.SELLER_RANK,
            SG.GRADE_SCORE
        FROM
            PRODUCT P
                INNER JOIN SELLER S ON P.SELLER_NUM = S.SELLER_NUM
                LEFT JOIN (
                SELECT
                    PRODUCT_NUM,
                    AVG(GRADE_SCORE) AS GRADE_SCORE
                FROM
                    PRODUCT_GRADE
                WHERE
                    GRADE_STAT = 1
                GROUP BY
                    PRODUCT_NUM
            ) SG ON P.PRODUCT_NUM = SG.PRODUCT_NUM
        WHERE
            P.PRODUCT_SOLDOUT = 0
          AND P.PRODUCT_STAT = 1
        ORDER BY
            DISCOUNT_AMOUNT DESC
        ]]>
    </select>

    <!-- 상품 카테고리별 검색 순서 페이징 리스트  -->
    <select id="cateProductList" parameterType="hashmap" resultType="hashmap">

        SELECT
        PRODUCT_NUM,
        MANUFACTURER_NAME,
        SELLER_NUM,
        PRODUCT_NAME,
        PRODUCT_SALEPRICE,
        PRODUCT_ORIGINALPRICE,
        (PRODUCT_ORIGINALPRICE - PRODUCT_SALEPRICE) AS DISCOUNT_AMOUNT,
        PRODUCT_SHIPPINGFEE,
        PRODUCT_QUANTITY,
        PRODUCT_CATEGORY1,
        PRODUCT_CATEGORY2,
        PRODUCT_DESCRIPTION,
        PRODUCT_IMG,
        PRODUCT_SOLDOUT,
        PRODUCT_SALES,
        TO_CHAR(PRODUCT_REGDATE, 'YYYY.MM.DD') AS PRODUCT_DATE,
        PRODUCT_VISITCOUNT,
        PRODUCT_STAT
        FROM PRODUCT
        WHERE GS.PRODUCT_NO = GI.PRODUCT_NO
        AND PRODUCT_CATEGORY = #{cate}
        <if test="keyword != null">
            AND (PRODUCT_NAME LIKE '%' || #{keyword} || '%' OR PRODUCT_KEYWORD LIKE '%' || #{keyword} || '%')
        </if>
        AND GUBUN = '0'
        <if test="orderBy != '' and orderBy != 'null'">
            ORDER BY ${orderBy} ${orderSort}
        </if>

    </select>

    <!-- 메인검색 리스트 -->
    <select id="mainSearch" parameterType="hashmap" resultType="hashmap">
        <include refid="common.pagingPre2"/>
        SELECT PRODUCT_NUM,
               PRODUCT_NAME,
               PRODUCT_SALEPRICE,
               PRODUCT_ORIGINALPRICE,
               PRODUCT_QUANTITY,
               PRODUCT_CATEGORY1,
               PRODUCT_CATEGORY2,
               PRODUCT_DESCRIPTION,
               PRODUCT_STAT,
               PRODUCT_IMG,
               TO_CHAR(PRODUCT_DATE, 'YYYY.MM.DD') AS PRODUCT_DATE,
               PRODUCT_VISITCOUNT
        FROM PRODUCT
        WHERE
        <if test="keyword != null">
            AND (PRODUCT_NAME LIKE '%' || #{keyword} || '%' OR PRODUCT_KEYWORD LIKE '%' || #{keyword} || '%')
        </if>
        AND PRODUCT_STAT = true
        ORDER BY PRODUCT_NUM DESC
        <include refid="common.pagingPost2"/>

    </select>

    <!-- 상품 상세보기 -->
    <select id="selectProductDetail" parameterType="hashmap" resultType="hashmap">
        <![CDATA[
			SELECT
                PRODUCT_NUM,
                PRODUCT_NAME,
                PRODUCT_SALEPRICE,
                PRODUCT_ORIGINALPRICE,
                PRODUCT_QUANTITY,
                PRODUCT_CATEGORY1,
                PRODUCT_CATEGORY2,
                PRODUCT_DESCRIPTION,
                PRODUCT_STAT,
                PRODUCT_IMG,
                TO_CHAR(PRODUCT_DATE, 'YYYY.MM.DD') AS PRODUCT_DATE,
                PRODUCT_VISITCOUNT
			FROM 
				PRODUCT 
			WHERE 
	           	PRODUCT_NUM = #{IDX}
		]]>
    </select>

    <!-- 상품상세보기 컬러랑 사이즈 배열로 가져오기 -->
    <select id="selectProductAtt" parameterType="hashmap" resultType="hashmap">
        <![CDATA[
			SELECT 
				LISTAGG(PRODUCT_ATT_COLOR,',') WITHIN GROUP(ORDER BY PRODUCT_ATT_COLOR) AS PRODUCT_ATT_COLOR,
                LISTAGG(PRODUCT_ATT_SIZE,',') WITHIN GROUP(ORDER BY PRODUCT_ATT_SIZE) AS PRODUCT_ATT_SIZE
			FROM 
				PRODUCT_ATTRIBUTE
			WHERE 
	           	PRODUCT_NUM = #{IDX}

		]]>
    </select>

    <!-- 상품상세보기 상품옵션 PK값 가져오기 -->
    <select id="selectProductAttNum" parameterType="hashmap" resultType="hashmap">
        <![CDATA[
			SELECT
				PRODUCT_ATT_NO
			FROM
				PRODUCT_ATTRIBUTE
			WHERE
				PRODUCT_NO = #{IDX}
			AND PRODUCT_ATT_COLOR like '%' || #{SELECT_COLOR} || '%' 
            AND PRODUCT_ATT_SIZE like  '%' || #{SELECT_SIZE} || '%'
		]]>
    </select>

    <!-- 조회수 증가 -->
    <update id="productReadCntUp" parameterType="hashmap">
        <![CDATA[
			UPDATE PRODUCT
			SET
                PRODUCT_VISITCOUNT = PRODUCT_VISITCOUNT + 1
			WHERE
				PRODUCT_NUM = #{IDX}
		]]>
    </update>

    <!-- 상품 등록 -->
    <insert id="productInsert" parameterType="hashmap" useGeneratedKeys="true" keyProperty="IDX">
        <![CDATA[
			INSERT INTO PRODUCT(
                PRODUCT_NAME,
                PRODUCT_SALEPRICE,
                PRODUCT_ORIGINALPRICE,
                PRODUCT_QUANTITY,
                PRODUCT_CATEGORY1,
                PRODUCT_CATEGORY2,
                PRODUCT_DESCRIPTION,
                PRODUCT_STAT,
                PRODUCT_IMG,
                PRODUCT_VISITCOUNT
							 )
						VALUES(
						       #{PRODUCT_NAME},
                                  #{PRODUCT_SALEPRICE},
                                  #{PRODUCT_ORIGINALPRICE},
                                  #{PRODUCT_QUANTITY},
                                  #{PRODUCT_CATEGORY1},
                                  #{PRODUCT_CATEGORY2},
                                  #{PRODUCT_DESCRIPTION},
                                  #{PRODUCT_STAT},
                                  #{PRODUCT_IMG},
                                  #{PRODUCT_VISITCOUNT}
							  )				
		]]>
    </insert>

    <!-- 상품 업데이트 -->
    <update id="updateProduct" parameterType="hashmap">
        <![CDATA[
			UPDATE  PRODUCT
			SET     PRODUCT_NAME = #{PRODUCT_NAME},
                    PRODUCT_SALEPRICE = #{PRODUCT_SALEPRICE},
                    PRODUCT_ORIGINALPRICE = #{PRODUCT_ORIGINALPRICE},
                    PRODUCT_QUANTITY = #{PRODUCT_QUANTITY},
                    PRODUCT_CATEGORY1 = #{PRODUCT_CATEGORY1},
                    PRODUCT_CATEGORY2 = #{PRODUCT_CATEGORY2},
                    PRODUCT_DESCRIPTION = #{PRODUCT_DESCRIPTION},
                    PRODUCT_STAT = #{PRODUCT_STAT},
                    PRODUCT_IMG = #{PRODUCT_IMG},
                    PRODUCT_VISITCOUNT = #{PRODUCT_VISITCOUNT}
		]]>
    </update>

    <!-- 상품 삭제(숨김) -->
    <update id="deleteProduct" parameterType="hashmap">
        <![CDATA[
			UPDATE  PRODUCT
			SET     PRODUCT_STAT = false
			WHERE   PRODUCT_NUM = #{IDX}
		]]>
    </update>

    <!-- 상품 옵션 등록 -->
    <insert id="attributeInsert" parameterType="hashmap">
        <![CDATA[
			INSERT INTO PRODUCT_ATTRIBUTE(
										PRODUCT_ATT_NO,
										PRODUCT_NO,
										PRODUCT_ATT_SIZE,
										PRODUCT_ATT_COLOR,
										PRODUCT_ATT_AMOUNT,
										PRODUCT_ATT_DISPLAY
										)
								values(
										PRODUCT_ATT_NO_SEQ.NEXTVAL,
										#{IDX},
										#{PRODUCT_ATT_SIZE},
										#{PRODUCT_ATT_COLOR},
										#{PRODUCT_ATT_AMOUNT},
										'0'
									    )
		
		]]>
    </insert>

    <!-- 상품 옵션 삭제 -->
    <delete id="attributeDelete" parameterType="hashmap">
        <![CDATA[
			DELETE  
			  FROM  PRODUCT_ATTRIBUTE
			WHERE   PRODUCT_NO = #{IDX}
		]]>
    </delete>

    <!-- 상품 이미지 등록 -->
    <insert id="insertFile" parameterType="hashmap">
        <![CDATA[
			INSERT INTO PRODUCT_IMAGE
					(
						PRODUCT_IMAGE_NUM,
						PRODUCT_NO,
						PRODUCT_IMAGE_ORG,
						PRODUCT_IMAGE_STD
					)
			VALUES
					(
						PRODUCT_IMAGE_SEQ.NEXTVAL,
						#{IDX},
						'null',
						#{UPLOAD_SAVE_NAME}
					)
		]]>
    </insert>

    <!-- 상품 이미지 삭제 -->
    <delete id="deleteFile" parameterType="hashmap">
        <![CDATA[
			DELETE  
			  FROM  PRODUCT_IMAGE
			WHERE   PRODUCT_NO = #{IDX}
		]]>
    </delete>

    <!-- 상품 썸네일 이미지 등록 -->
    <update id="updateProductThumbnail" parameterType="hashmap">
        <![CDATA[
			UPDATE  PRODUCT 
			SET     PRODUCT_THUMBNAIL = #{PRODUCT_THUMBNAIL}
			WHERE   PRODUCT_NO = #{IDX}
		]]>
    </update>

    <!-- 디테일에서 상품 좋아요 등록 -->
    <insert id="insertProductLike" parameterType="hashmap">
        <![CDATA[
			INSERT INTO PRODUCT_LIKE
					(
						LIKE_NO,
						PRODUCT_NO,
						MEMBER_NO,
						LIKE_DATE
					)
			VALUES
					(
						LIKE_NO_SEQ.NEXTVAL,
						#{IDX},
						#{MEMBER_NO},
						sysdate
					)
		]]>
    </insert>

    <!-- 상품 좋아요 삭제 -->
    <delete id="deleteProductLike" parameterType="hashmap">
        <![CDATA[
			DELETE 
			FROM    PRODUCT_LIKE 
			WHERE   MEMBER_NO = #{MEMBER_NO}
			AND     PRODUCT_NO = #{PRODUCT_NO}
		]]>
    </delete>

    <!-- 상품 장바구니 추가 -->
    <insert id="insertCart" parameterType="hashmap">
        <selectKey resultType="string" keyProperty="PRODUCT_ATT_NO" order="BEFORE">
            SELECT
            PRODUCT_ATT_NO
            FROM
            PRODUCT_ATTRIBUTE
            WHERE
            PRODUCT_NO = #{IDX}
            AND PRODUCT_ATT_COLOR like '%' || #{ORDER_COLOR} || '%'
            AND PRODUCT_ATT_SIZE like  '%' || #{ORDER_SIZE} || '%'
        </selectKey>
        <![CDATA[
			INSERT INTO CART(
								CART_NO,
								MEMBER_NO,
								PRODUCT_NO,
								PRODUCT_ATT_NO,
								CART_PRODUCT_AMOUNT,
								CART_DATE,
								ORDER_COLOR,
								ORDER_SIZE,
								GUBUN
							 )
						VALUES(
								CART_NO_SEQ.NEXTVAL,
								#{MEMBER_NO},
								#{IDX},
								#{PRODUCT_ATT_NO},
								#{CART_PRODUCT_AMOUNT},
								sysdate,
								#{ORDER_COLOR},
								#{ORDER_SIZE},
								#{GUBUN}
							  )				
		]]>
    </insert>

    <!-- 상품상세보기 장바구니 PK값 가져오기 -->
    <select id="selectCartNo" parameterType="hashmap" resultType="hashmap">
        <![CDATA[
			SELECT 
        			LISTAGG(CART_NO,',') WITHIN GROUP(ORDER BY CART_NO) AS CART_NO
			FROM 
					CART
			WHERE 
	           	    MEMBER_NO = #{MEMBER_NO}
              AND   GUBUN = '1'
		]]>
    </select>

    <!-- 주문한 상품 수량변경 -->
    <update id="updateProductAmount" parameterType="hashmap">
        <![CDATA[
        UPDATE  PRODUCT_ATTRIBUTE
        SET     PRODUCT_ATT_AMOUNT = PRODUCT_ATT_AMOUNT-#{ORDER_DETAIL_AMOUNT}
        WHERE   PRODUCT_ATT_NO = #{PRODUCT_ATT_NO}
        ]]>
    </update>

    <!-- 재고수량 0이하  -->
    <update id="updateProductDisplay" parameterType="hashmap">
        <![CDATA[
        UPDATE
            PRODUCT_ATTRIBUTE
        SET
            PRODUCT_ATT_DISPLAY = 1
        WHERE
            PRODUCT_ATT_AMOUNT <= 0
          AND PRODUCT_ATT_NO = #{PRODUCT_ATT_NO}

        ]]>
    </update>

    <!-- 상품 QNA 리스트 -->
    <select id="selectProductQna" parameterType="hashmap" resultType="hashmap">
        <![CDATA[
			
			SELECT
				  AAA.* 
			FROM( select count(*) over() as total_count, AA.*
			FROM(
				select ROW_NUMBER() OVER (ORDER BY PRODUCT_QNA_DATE desc) RNUM,
				PRODUCT_QNA_NO,
				PRODUCT_NO,
				MEMBER_NO,
				PRODUCT_QNA_LEVEL,
				PRODUCT_QNA_TITLE,
				PRODUCT_QNA_CONTENT,
				PRODUCT_QNA_DATE,
				PRODUCT_QNA_SECRET,
				MEMBER_NAME,
				PRODUCT_QNA_AN
			FROM
				PRODUCT_QNA
				) AA
		          ) AAA
               WHERE PRODUCT_NO = #{IDX}
              	AND AAA.RNUM BETWEEN 0 AND 9 
		]]>
    </select>

    <!-- 상품 QNA 등록 상품문의는 등록만되고 삭제 수정안됨 관리자만 삭제가능 -->
    <insert id="insertProductQna" parameterType="hashmap">
        <![CDATA[
			INSERT INTO PRODUCT_QNA(
								PRODUCT_QNA_NO,
								PRODUCT_NO,
								MEMBER_NO,
								PRODUCT_QNA_LEVEL,
								PRODUCT_QNA_TITLE,
								PRODUCT_QNA_CONTENT,
								PRODUCT_QNA_DATE,
								MEMBER_NAME,
								PRODUCT_QNA_SECRET
								)
						values(
								PRODUCT_QNA_NO_SEQ.NEXTVAL,
								#{IDX},
								#{MEMBER_NO},
								0,
								#{PRODUCT_QNA_TITLE},
								#{PRODUCT_QNA_CONTENT},
								sysdate,
								#{MEMBER_NAME},
								#{PRODUCT_QNA_SECRET}
							   )
		]]>
    </insert>

    <!-- 답변수정 -->
    <update id="updateProductQna" parameterType="hashmap">
        UPDATE PRODUCT_QNA
        SET
            PRODUCT_QNA_AN = #{PRODUCT_QNA_AN},
            PRODUCT_QNA_LEVEL = 1
        WHERE
            PRODUCT_QNA_NO = #{PRODUCT_QNA_NO}
    </update>

    <!-- 구매목록 초기화 -->
    <delete id="gumeListDelete" parameterType="hashmap">
        <![CDATA[
			DELETE  
			  FROM  CART
			WHERE   GUBUN = '1'
		]]>
    </delete>

</mapper>